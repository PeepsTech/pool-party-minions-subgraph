type Minion @entity {
  id: ID!
  createdAt: String!
  minionAddress: Bytes!
  molochAddress: Bytes!
  proposals: [Proposals!] @derivedFrom(field: "minion")
  balances: [Tokens!] @derivedFrom(field: "minion")
  deposits: [Deposits!] @derivedFrom(field: "minion")
  withdraws:[Withdraws!] @derivedFrom(field: "minion")
  earningsTokens: [Bytes!]
  details: String!
  minionType: String!
  protocol: Protocol!
}

type Proposals @entity{
  id: ID!
  minion: Minion!
  proposer: Bytes!
  proposalId: BigInt!
  canceled: Boolean!
  executed: Boolean!
}

type Deposits @entity {
  id: ID!
  dao: Bytes! # address
  minion: Minion! # address
  proposal: Proposals!
  depositToken: [Tokens!]! # address(es)
  receiptToken: Tokens!# address
  amount: BigInt! # address
  protocol: Protocol!
  details: String
}

type Withdraws @entity {
  id: ID!
  dao: Bytes! # address
  minion: Minion! # address
  proposal: Proposals!
  withdrawToken: Tokens! # address
  receiptToken: [Tokens!]! 
  amount: BigInt! # address
  protocol: Protocol!
  details: String
}

type Loans @entity {
  id: ID!
  dao: Bytes! # address
  minion: Minion! # address
  proposal: Proposals!
  receiptToken: Tokens! # address
  amount: BigInt! # address
  protocol: Protocol! 
  details: String
}

type Repayments @entity {
  id: ID!
  dao: Bytes! # address
  minion: Minion! # address
  proposal: Proposals!
  paymentToken: Tokens! # address
  amount: BigInt! # address
  protocol: Protocol! 
  details: String
}


type Actions @entity{
  id: ID!
  dao: Bytes! # address
  minion: Minion! # address 
  token: Bytes!
  amount: BigInt # address
  proposal: Proposals!
  data: Bytes
  details: String
  type: Bytes
  protocol: Protocol! 

}

type Protocol @entity {
  id: ID! # address 
  protocolAddress: Bytes! #address 
  minion: Minion!
  name: String
}

type Tokens @entity {
  id: ID! 
  minion: Minion!
  protocol: Protocol
  tokenAddress: Bytes!
  tokenSymbol: String
  balance: BigInt!
  rewardsOn: Boolean
  deposits: [Deposits!] @derivedFrom(field: "depositToken")
  withdraws: [Withdraws!] @derivedFrom(field: "receiptToken")
  loans: [Loans!] @derivedFrom(field: "receiptToken")
  repayments: [Repayments!] @derivedFrom(field: "paymentToken")
}

type Members @entity {
  id: ID!
  minion: Minion!
  memberAddress: Bytes!
  rewards: [Rewards!] @derivedFrom(field: "member")
}

type Rewards @entity {
  id: ID!
  minion: Minion!
  member: Members!
  token: Bytes!
  amount: BigInt!
}

// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Canceled extends ethereum.Event {
  get params(): Canceled__Params {
    return new Canceled__Params(this);
  }
}

export class Canceled__Params {
  _event: Canceled;

  constructor(event: Canceled) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposalType(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get functionCaller(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class CollateralWithdrawExecuted extends ethereum.Event {
  get params(): CollateralWithdrawExecuted__Params {
    return new CollateralWithdrawExecuted__Params(this);
  }
}

export class CollateralWithdrawExecuted__Params {
  _event: CollateralWithdrawExecuted;

  constructor(event: CollateralWithdrawExecuted) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DepositExecuted extends ethereum.Event {
  get params(): DepositExecuted__Params {
    return new DepositExecuted__Params(this);
  }
}

export class DepositExecuted__Params {
  _event: DepositExecuted;

  constructor(event: DepositExecuted) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class EarningsToggled extends ethereum.Event {
  get params(): EarningsToggled__Params {
    return new EarningsToggled__Params(this);
  }
}

export class EarningsToggled__Params {
  _event: EarningsToggled;

  constructor(event: EarningsToggled) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get status(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class EarningsWithdraw extends ethereum.Event {
  get params(): EarningsWithdraw__Params {
    return new EarningsWithdraw__Params(this);
  }
}

export class EarningsWithdraw__Params {
  _event: EarningsWithdraw;

  constructor(event: EarningsWithdraw) {
    this._event = event;
  }

  get member(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get earnings(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get destination(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class LoanExecuted extends ethereum.Event {
  get params(): LoanExecuted__Params {
    return new LoanExecuted__Params(this);
  }
}

export class LoanExecuted__Params {
  _event: LoanExecuted;

  constructor(event: LoanExecuted) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ProposeCollateralWithdraw extends ethereum.Event {
  get params(): ProposeCollateralWithdraw__Params {
    return new ProposeCollateralWithdraw__Params(this);
  }
}

export class ProposeCollateralWithdraw__Params {
  _event: ProposeCollateralWithdraw;

  constructor(event: ProposeCollateralWithdraw) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get destination(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class ProposeDeposit extends ethereum.Event {
  get params(): ProposeDeposit__Params {
    return new ProposeDeposit__Params(this);
  }
}

export class ProposeDeposit__Params {
  _event: ProposeDeposit;

  constructor(event: ProposeDeposit) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ProposeLoan extends ethereum.Event {
  get params(): ProposeLoan__Params {
    return new ProposeLoan__Params(this);
  }
}

export class ProposeLoan__Params {
  _event: ProposeLoan;

  constructor(event: ProposeLoan) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get beneficiary(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get rateMode(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class ProposeRepayLoan extends ethereum.Event {
  get params(): ProposeRepayLoan__Params {
    return new ProposeRepayLoan__Params(this);
  }
}

export class ProposeRepayLoan__Params {
  _event: ProposeRepayLoan;

  constructor(event: ProposeRepayLoan) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get rateMode(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get onBehalfOf(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class ProposeToggleEarnings extends ethereum.Event {
  get params(): ProposeToggleEarnings__Params {
    return new ProposeToggleEarnings__Params(this);
  }
}

export class ProposeToggleEarnings__Params {
  _event: ProposeToggleEarnings;

  constructor(event: ProposeToggleEarnings) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RepayLoanExecuted extends ethereum.Event {
  get params(): RepayLoanExecuted__Params {
    return new RepayLoanExecuted__Params(this);
  }
}

export class RepayLoanExecuted__Params {
  _event: RepayLoanExecuted;

  constructor(event: RepayLoanExecuted) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class WithdrawToDAO extends ethereum.Event {
  get params(): WithdrawToDAO__Params {
    return new WithdrawToDAO__Params(this);
  }
}

export class WithdrawToDAO__Params {
  _event: WithdrawToDAO;

  constructor(event: WithdrawToDAO) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class WithdrawToMinion extends ethereum.Event {
  get params(): WithdrawToMinion__Params {
    return new WithdrawToMinion__Params(this);
  }
}

export class WithdrawToMinion__Params {
  _event: WithdrawToMinion;

  constructor(event: WithdrawToMinion) {
    this._event = event;
  }

  get targetDao(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AaveParty__actionsResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: i32;
  value4: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: i32,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }
}

export class AaveParty__collateralWithdrawsResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }
}

export class AaveParty__depositsResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }
}

export class AaveParty__doWithdrawResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class AaveParty__executeToggleEarningsResult {
  value0: Address;
  value1: boolean;

  constructor(value0: Address, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }
}

export class AaveParty__getAaveTokenAddressesResult {
  value0: Address;
  value1: Address;
  value2: Address;

  constructor(value0: Address, value1: Address, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }
}

export class AaveParty__getOurCompactReserveDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }
}

export class AaveParty__loanRepaymentsResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }
}

export class AaveParty__loansResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }
}

export class AaveParty extends ethereum.SmartContract {
  static bind(address: Address): AaveParty {
    return new AaveParty("AaveParty", address);
  }

  AAVE_ADDRESS_PROVIDER(): Address {
    let result = super.call(
      "AAVE_ADDRESS_PROVIDER",
      "AAVE_ADDRESS_PROVIDER():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_AAVE_ADDRESS_PROVIDER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "AAVE_ADDRESS_PROVIDER",
      "AAVE_ADDRESS_PROVIDER():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  FEE_BASE(): BigInt {
    let result = super.call("FEE_BASE", "FEE_BASE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_FEE_BASE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("FEE_BASE", "FEE_BASE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  WITHDRAW_FACTOR(): BigInt {
    let result = super.call(
      "WITHDRAW_FACTOR",
      "WITHDRAW_FACTOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_WITHDRAW_FACTOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "WITHDRAW_FACTOR",
      "WITHDRAW_FACTOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  aTokenRedemptions(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "aTokenRedemptions",
      "aTokenRedemptions(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_aTokenRedemptions(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "aTokenRedemptions",
      "aTokenRedemptions(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  aaveData(): Address {
    let result = super.call("aaveData", "aaveData():(address)", []);

    return result[0].toAddress();
  }

  try_aaveData(): ethereum.CallResult<Address> {
    let result = super.tryCall("aaveData", "aaveData():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  aavePool(): Address {
    let result = super.call("aavePool", "aavePool():(address)", []);

    return result[0].toAddress();
  }

  try_aavePool(): ethereum.CallResult<Address> {
    let result = super.tryCall("aavePool", "aavePool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  actions(param0: BigInt): AaveParty__actionsResult {
    let result = super.call(
      "actions",
      "actions(uint256):(address,address,uint256,uint16,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new AaveParty__actionsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toI32(),
      result[4].toBoolean()
    );
  }

  try_actions(param0: BigInt): ethereum.CallResult<AaveParty__actionsResult> {
    let result = super.tryCall(
      "actions",
      "actions(uint256):(address,address,uint256,uint16,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AaveParty__actionsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toI32(),
        value[4].toBoolean()
      )
    );
  }

  borrowFunds(
    token: Address,
    amount: BigInt,
    rateMode: BigInt,
    onBehalfOf: Address,
    details: string
  ): BigInt {
    let result = super.call(
      "borrowFunds",
      "borrowFunds(address,uint256,uint256,address,string):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(rateMode),
        ethereum.Value.fromAddress(onBehalfOf),
        ethereum.Value.fromString(details)
      ]
    );

    return result[0].toBigInt();
  }

  try_borrowFunds(
    token: Address,
    amount: BigInt,
    rateMode: BigInt,
    onBehalfOf: Address,
    details: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowFunds",
      "borrowFunds(address,uint256,uint256,address,string):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(rateMode),
        ethereum.Value.fromAddress(onBehalfOf),
        ethereum.Value.fromString(details)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcFees(token: Address, amount: BigInt): BigInt {
    let result = super.call("calcFees", "calcFees(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(token),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_calcFees(token: Address, amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcFees",
      "calcFees(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcMemberEarnings(token: Address, user: Address): BigInt {
    let result = super.call(
      "calcMemberEarnings",
      "calcMemberEarnings(address,address):(uint256)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_calcMemberEarnings(
    token: Address,
    user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcMemberEarnings",
      "calcMemberEarnings(address,address):(uint256)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateralWithdraws(param0: BigInt): AaveParty__collateralWithdrawsResult {
    let result = super.call(
      "collateralWithdraws",
      "collateralWithdraws(uint256):(address,address,address,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new AaveParty__collateralWithdrawsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBoolean()
    );
  }

  try_collateralWithdraws(
    param0: BigInt
  ): ethereum.CallResult<AaveParty__collateralWithdrawsResult> {
    let result = super.tryCall(
      "collateralWithdraws",
      "collateralWithdraws(uint256):(address,address,address,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AaveParty__collateralWithdrawsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBoolean()
      )
    );
  }

  dao(): Address {
    let result = super.call("dao", "dao():(address)", []);

    return result[0].toAddress();
  }

  try_dao(): ethereum.CallResult<Address> {
    let result = super.tryCall("dao", "dao():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  daoWithdraw(token: Address, amount: BigInt, details: string): BigInt {
    let result = super.call(
      "daoWithdraw",
      "daoWithdraw(address,uint256,string):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromString(details)
      ]
    );

    return result[0].toBigInt();
  }

  try_daoWithdraw(
    token: Address,
    amount: BigInt,
    details: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "daoWithdraw",
      "daoWithdraw(address,uint256,string):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromString(details)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  data(): Address {
    let result = super.call("data", "data():(address)", []);

    return result[0].toAddress();
  }

  try_data(): ethereum.CallResult<Address> {
    let result = super.tryCall("data", "data():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  depositCollateral(
    token: Address,
    paymentRequested: BigInt,
    details: string
  ): BigInt {
    let result = super.call(
      "depositCollateral",
      "depositCollateral(address,uint256,string):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(paymentRequested),
        ethereum.Value.fromString(details)
      ]
    );

    return result[0].toBigInt();
  }

  try_depositCollateral(
    token: Address,
    paymentRequested: BigInt,
    details: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositCollateral",
      "depositCollateral(address,uint256,string):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(paymentRequested),
        ethereum.Value.fromString(details)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deposits(param0: BigInt): AaveParty__depositsResult {
    let result = super.call(
      "deposits",
      "deposits(uint256):(address,address,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new AaveParty__depositsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_deposits(param0: BigInt): ethereum.CallResult<AaveParty__depositsResult> {
    let result = super.tryCall(
      "deposits",
      "deposits(uint256):(address,address,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AaveParty__depositsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  desc(): string {
    let result = super.call("desc", "desc():(string)", []);

    return result[0].toString();
  }

  try_desc(): ethereum.CallResult<string> {
    let result = super.tryCall("desc", "desc():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  doWithdraw(
    targetDao: Address,
    token: Address,
    amount: BigInt
  ): AaveParty__doWithdrawResult {
    let result = super.call(
      "doWithdraw",
      "doWithdraw(address,address,uint256):(address,uint256)",
      [
        ethereum.Value.fromAddress(targetDao),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return new AaveParty__doWithdrawResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_doWithdraw(
    targetDao: Address,
    token: Address,
    amount: BigInt
  ): ethereum.CallResult<AaveParty__doWithdrawResult> {
    let result = super.tryCall(
      "doWithdraw",
      "doWithdraw(address,address,uint256):(address,uint256)",
      [
        ethereum.Value.fromAddress(targetDao),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AaveParty__doWithdrawResult(value[0].toAddress(), value[1].toBigInt())
    );
  }

  earningsPeg(param0: Address): BigInt {
    let result = super.call("earningsPeg", "earningsPeg(address):(int256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_earningsPeg(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("earningsPeg", "earningsPeg(address):(int256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  executeBorrow(proposalId: BigInt): BigInt {
    let result = super.call(
      "executeBorrow",
      "executeBorrow(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );

    return result[0].toBigInt();
  }

  try_executeBorrow(proposalId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "executeBorrow",
      "executeBorrow(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  executeCollateralDeposit(proposalId: BigInt): BigInt {
    let result = super.call(
      "executeCollateralDeposit",
      "executeCollateralDeposit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );

    return result[0].toBigInt();
  }

  try_executeCollateralDeposit(
    proposalId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "executeCollateralDeposit",
      "executeCollateralDeposit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  executeCollateralWithdraw(proposalId: BigInt): BigInt {
    let result = super.call(
      "executeCollateralWithdraw",
      "executeCollateralWithdraw(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );

    return result[0].toBigInt();
  }

  try_executeCollateralWithdraw(
    proposalId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "executeCollateralWithdraw",
      "executeCollateralWithdraw(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  executeLoanRepay(proposalId: BigInt): BigInt {
    let result = super.call(
      "executeLoanRepay",
      "executeLoanRepay(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );

    return result[0].toBigInt();
  }

  try_executeLoanRepay(proposalId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "executeLoanRepay",
      "executeLoanRepay(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  executeToggleEarnings(
    proposalId: BigInt
  ): AaveParty__executeToggleEarningsResult {
    let result = super.call(
      "executeToggleEarnings",
      "executeToggleEarnings(uint256):(address,bool)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );

    return new AaveParty__executeToggleEarningsResult(
      result[0].toAddress(),
      result[1].toBoolean()
    );
  }

  try_executeToggleEarnings(
    proposalId: BigInt
  ): ethereum.CallResult<AaveParty__executeToggleEarningsResult> {
    let result = super.tryCall(
      "executeToggleEarnings",
      "executeToggleEarnings(uint256):(address,bool)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AaveParty__executeToggleEarningsResult(
        value[0].toAddress(),
        value[1].toBoolean()
      )
    );
  }

  feeFactor(): BigInt {
    let result = super.call("feeFactor", "feeFactor():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeFactor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feeFactor", "feeFactor():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAaveTokenAddresses(
    token: Address
  ): AaveParty__getAaveTokenAddressesResult {
    let result = super.call(
      "getAaveTokenAddresses",
      "getAaveTokenAddresses(address):(address,address,address)",
      [ethereum.Value.fromAddress(token)]
    );

    return new AaveParty__getAaveTokenAddressesResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress()
    );
  }

  try_getAaveTokenAddresses(
    token: Address
  ): ethereum.CallResult<AaveParty__getAaveTokenAddressesResult> {
    let result = super.tryCall(
      "getAaveTokenAddresses",
      "getAaveTokenAddresses(address):(address,address,address)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AaveParty__getAaveTokenAddressesResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress()
      )
    );
  }

  getHealthFactor(user: Address): BigInt {
    let result = super.call(
      "getHealthFactor",
      "getHealthFactor(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_getHealthFactor(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getHealthFactor",
      "getHealthFactor(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOurCompactReserveData(
    token: Address
  ): AaveParty__getOurCompactReserveDataResult {
    let result = super.call(
      "getOurCompactReserveData",
      "getOurCompactReserveData(address):(uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(token)]
    );

    return new AaveParty__getOurCompactReserveDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean()
    );
  }

  try_getOurCompactReserveData(
    token: Address
  ): ethereum.CallResult<AaveParty__getOurCompactReserveDataResult> {
    let result = super.tryCall(
      "getOurCompactReserveData",
      "getOurCompactReserveData(address):(uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AaveParty__getOurCompactReserveDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean()
      )
    );
  }

  isHealthy(): boolean {
    let result = super.call("isHealthy", "isHealthy():(bool)", []);

    return result[0].toBoolean();
  }

  try_isHealthy(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isHealthy", "isHealthy():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  loanRepayments(param0: BigInt): AaveParty__loanRepaymentsResult {
    let result = super.call(
      "loanRepayments",
      "loanRepayments(uint256):(address,address,address,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new AaveParty__loanRepaymentsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean()
    );
  }

  try_loanRepayments(
    param0: BigInt
  ): ethereum.CallResult<AaveParty__loanRepaymentsResult> {
    let result = super.tryCall(
      "loanRepayments",
      "loanRepayments(uint256):(address,address,address,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AaveParty__loanRepaymentsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean()
      )
    );
  }

  loans(param0: BigInt): AaveParty__loansResult {
    let result = super.call(
      "loans",
      "loans(uint256):(address,address,address,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new AaveParty__loansResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean()
    );
  }

  try_loans(param0: BigInt): ethereum.CallResult<AaveParty__loansResult> {
    let result = super.tryCall(
      "loans",
      "loans(uint256):(address,address,address,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AaveParty__loansResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean()
      )
    );
  }

  minHealthFactor(): BigInt {
    let result = super.call(
      "minHealthFactor",
      "minHealthFactor():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minHealthFactor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minHealthFactor",
      "minHealthFactor():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minionId(): BigInt {
    let result = super.call("minionId", "minionId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minionId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minionId", "minionId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  moloch(): Address {
    let result = super.call("moloch", "moloch():(address)", []);

    return result[0].toAddress();
  }

  try_moloch(): ethereum.CallResult<Address> {
    let result = super.tryCall("moloch", "moloch():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pool(): Address {
    let result = super.call("pool", "pool():(address)", []);

    return result[0].toAddress();
  }

  try_pool(): ethereum.CallResult<Address> {
    let result = super.tryCall("pool", "pool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proposals(param0: BigInt): BigInt {
    let result = super.call("proposals", "proposals(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_proposals(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("proposals", "proposals(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposeToggleEarnings(token: Address, details: string): BigInt {
    let result = super.call(
      "proposeToggleEarnings",
      "proposeToggleEarnings(address,string):(uint256)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromString(details)]
    );

    return result[0].toBigInt();
  }

  try_proposeToggleEarnings(
    token: Address,
    details: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposeToggleEarnings",
      "proposeToggleEarnings(address,string):(uint256)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromString(details)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  provider(): Address {
    let result = super.call("provider", "provider():(address)", []);

    return result[0].toAddress();
  }

  try_provider(): ethereum.CallResult<Address> {
    let result = super.tryCall("provider", "provider():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  repayLoan(
    token: Address,
    amount: BigInt,
    rateMode: BigInt,
    onBehalfOf: Address,
    details: string
  ): BigInt {
    let result = super.call(
      "repayLoan",
      "repayLoan(address,uint256,uint256,address,string):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(rateMode),
        ethereum.Value.fromAddress(onBehalfOf),
        ethereum.Value.fromString(details)
      ]
    );

    return result[0].toBigInt();
  }

  try_repayLoan(
    token: Address,
    amount: BigInt,
    rateMode: BigInt,
    onBehalfOf: Address,
    details: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "repayLoan",
      "repayLoan(address,uint256,uint256,address,string):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(rateMode),
        ethereum.Value.fromAddress(onBehalfOf),
        ethereum.Value.fromString(details)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  resetAavePool(): Address {
    let result = super.call("resetAavePool", "resetAavePool():(address)", []);

    return result[0].toAddress();
  }

  try_resetAavePool(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "resetAavePool",
      "resetAavePool():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  resetDataProvider(): Address {
    let result = super.call(
      "resetDataProvider",
      "resetDataProvider():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_resetDataProvider(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "resetDataProvider",
      "resetDataProvider():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardsOn(param0: Address): boolean {
    let result = super.call("rewardsOn", "rewardsOn(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_rewardsOn(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("rewardsOn", "rewardsOn(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawCollateral(
    token: Address,
    amount: BigInt,
    destination: Address,
    details: string
  ): BigInt {
    let result = super.call(
      "withdrawCollateral",
      "withdrawCollateral(address,uint256,address,string):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(destination),
        ethereum.Value.fromString(details)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawCollateral(
    token: Address,
    amount: BigInt,
    destination: Address,
    details: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawCollateral",
      "withdrawCollateral(address,uint256,address,string):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(destination),
        ethereum.Value.fromString(details)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawMyEarnings(token: Address, destination: Address): BigInt {
    let result = super.call(
      "withdrawMyEarnings",
      "withdrawMyEarnings(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(destination)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawMyEarnings(
    token: Address,
    destination: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawMyEarnings",
      "withdrawMyEarnings(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(destination)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class BorrowFundsCall extends ethereum.Call {
  get inputs(): BorrowFundsCall__Inputs {
    return new BorrowFundsCall__Inputs(this);
  }

  get outputs(): BorrowFundsCall__Outputs {
    return new BorrowFundsCall__Outputs(this);
  }
}

export class BorrowFundsCall__Inputs {
  _call: BorrowFundsCall;

  constructor(call: BorrowFundsCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get rateMode(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get details(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class BorrowFundsCall__Outputs {
  _call: BorrowFundsCall;

  constructor(call: BorrowFundsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CancelAaveProposalCall extends ethereum.Call {
  get inputs(): CancelAaveProposalCall__Inputs {
    return new CancelAaveProposalCall__Inputs(this);
  }

  get outputs(): CancelAaveProposalCall__Outputs {
    return new CancelAaveProposalCall__Outputs(this);
  }
}

export class CancelAaveProposalCall__Inputs {
  _call: CancelAaveProposalCall;

  constructor(call: CancelAaveProposalCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get propType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class CancelAaveProposalCall__Outputs {
  _call: CancelAaveProposalCall;

  constructor(call: CancelAaveProposalCall) {
    this._call = call;
  }
}

export class DaoWithdrawCall extends ethereum.Call {
  get inputs(): DaoWithdrawCall__Inputs {
    return new DaoWithdrawCall__Inputs(this);
  }

  get outputs(): DaoWithdrawCall__Outputs {
    return new DaoWithdrawCall__Outputs(this);
  }
}

export class DaoWithdrawCall__Inputs {
  _call: DaoWithdrawCall;

  constructor(call: DaoWithdrawCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get details(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class DaoWithdrawCall__Outputs {
  _call: DaoWithdrawCall;

  constructor(call: DaoWithdrawCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositCollateralCall extends ethereum.Call {
  get inputs(): DepositCollateralCall__Inputs {
    return new DepositCollateralCall__Inputs(this);
  }

  get outputs(): DepositCollateralCall__Outputs {
    return new DepositCollateralCall__Outputs(this);
  }
}

export class DepositCollateralCall__Inputs {
  _call: DepositCollateralCall;

  constructor(call: DepositCollateralCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get paymentRequested(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get details(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class DepositCollateralCall__Outputs {
  _call: DepositCollateralCall;

  constructor(call: DepositCollateralCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DoWithdrawCall extends ethereum.Call {
  get inputs(): DoWithdrawCall__Inputs {
    return new DoWithdrawCall__Inputs(this);
  }

  get outputs(): DoWithdrawCall__Outputs {
    return new DoWithdrawCall__Outputs(this);
  }
}

export class DoWithdrawCall__Inputs {
  _call: DoWithdrawCall;

  constructor(call: DoWithdrawCall) {
    this._call = call;
  }

  get targetDao(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DoWithdrawCall__Outputs {
  _call: DoWithdrawCall;

  constructor(call: DoWithdrawCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class ExecuteBorrowCall extends ethereum.Call {
  get inputs(): ExecuteBorrowCall__Inputs {
    return new ExecuteBorrowCall__Inputs(this);
  }

  get outputs(): ExecuteBorrowCall__Outputs {
    return new ExecuteBorrowCall__Outputs(this);
  }
}

export class ExecuteBorrowCall__Inputs {
  _call: ExecuteBorrowCall;

  constructor(call: ExecuteBorrowCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExecuteBorrowCall__Outputs {
  _call: ExecuteBorrowCall;

  constructor(call: ExecuteBorrowCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExecuteCollateralDepositCall extends ethereum.Call {
  get inputs(): ExecuteCollateralDepositCall__Inputs {
    return new ExecuteCollateralDepositCall__Inputs(this);
  }

  get outputs(): ExecuteCollateralDepositCall__Outputs {
    return new ExecuteCollateralDepositCall__Outputs(this);
  }
}

export class ExecuteCollateralDepositCall__Inputs {
  _call: ExecuteCollateralDepositCall;

  constructor(call: ExecuteCollateralDepositCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExecuteCollateralDepositCall__Outputs {
  _call: ExecuteCollateralDepositCall;

  constructor(call: ExecuteCollateralDepositCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExecuteCollateralWithdrawCall extends ethereum.Call {
  get inputs(): ExecuteCollateralWithdrawCall__Inputs {
    return new ExecuteCollateralWithdrawCall__Inputs(this);
  }

  get outputs(): ExecuteCollateralWithdrawCall__Outputs {
    return new ExecuteCollateralWithdrawCall__Outputs(this);
  }
}

export class ExecuteCollateralWithdrawCall__Inputs {
  _call: ExecuteCollateralWithdrawCall;

  constructor(call: ExecuteCollateralWithdrawCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExecuteCollateralWithdrawCall__Outputs {
  _call: ExecuteCollateralWithdrawCall;

  constructor(call: ExecuteCollateralWithdrawCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExecuteLoanRepayCall extends ethereum.Call {
  get inputs(): ExecuteLoanRepayCall__Inputs {
    return new ExecuteLoanRepayCall__Inputs(this);
  }

  get outputs(): ExecuteLoanRepayCall__Outputs {
    return new ExecuteLoanRepayCall__Outputs(this);
  }
}

export class ExecuteLoanRepayCall__Inputs {
  _call: ExecuteLoanRepayCall;

  constructor(call: ExecuteLoanRepayCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExecuteLoanRepayCall__Outputs {
  _call: ExecuteLoanRepayCall;

  constructor(call: ExecuteLoanRepayCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExecuteToggleEarningsCall extends ethereum.Call {
  get inputs(): ExecuteToggleEarningsCall__Inputs {
    return new ExecuteToggleEarningsCall__Inputs(this);
  }

  get outputs(): ExecuteToggleEarningsCall__Outputs {
    return new ExecuteToggleEarningsCall__Outputs(this);
  }
}

export class ExecuteToggleEarningsCall__Inputs {
  _call: ExecuteToggleEarningsCall;

  constructor(call: ExecuteToggleEarningsCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExecuteToggleEarningsCall__Outputs {
  _call: ExecuteToggleEarningsCall;

  constructor(call: ExecuteToggleEarningsCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get value1(): boolean {
    return this._call.outputValues[1].value.toBoolean();
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get _dao(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _feeAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _aavePool(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _aaveData(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _minionId(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _feeFactor(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _minHealthFactor(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _desc(): string {
    return this._call.inputValues[7].value.toString();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class ProposeToggleEarningsCall extends ethereum.Call {
  get inputs(): ProposeToggleEarningsCall__Inputs {
    return new ProposeToggleEarningsCall__Inputs(this);
  }

  get outputs(): ProposeToggleEarningsCall__Outputs {
    return new ProposeToggleEarningsCall__Outputs(this);
  }
}

export class ProposeToggleEarningsCall__Inputs {
  _call: ProposeToggleEarningsCall;

  constructor(call: ProposeToggleEarningsCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get details(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ProposeToggleEarningsCall__Outputs {
  _call: ProposeToggleEarningsCall;

  constructor(call: ProposeToggleEarningsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RepayLoanCall extends ethereum.Call {
  get inputs(): RepayLoanCall__Inputs {
    return new RepayLoanCall__Inputs(this);
  }

  get outputs(): RepayLoanCall__Outputs {
    return new RepayLoanCall__Outputs(this);
  }
}

export class RepayLoanCall__Inputs {
  _call: RepayLoanCall;

  constructor(call: RepayLoanCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get rateMode(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get details(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class RepayLoanCall__Outputs {
  _call: RepayLoanCall;

  constructor(call: RepayLoanCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ResetAavePoolCall extends ethereum.Call {
  get inputs(): ResetAavePoolCall__Inputs {
    return new ResetAavePoolCall__Inputs(this);
  }

  get outputs(): ResetAavePoolCall__Outputs {
    return new ResetAavePoolCall__Outputs(this);
  }
}

export class ResetAavePoolCall__Inputs {
  _call: ResetAavePoolCall;

  constructor(call: ResetAavePoolCall) {
    this._call = call;
  }
}

export class ResetAavePoolCall__Outputs {
  _call: ResetAavePoolCall;

  constructor(call: ResetAavePoolCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class ResetDataProviderCall extends ethereum.Call {
  get inputs(): ResetDataProviderCall__Inputs {
    return new ResetDataProviderCall__Inputs(this);
  }

  get outputs(): ResetDataProviderCall__Outputs {
    return new ResetDataProviderCall__Outputs(this);
  }
}

export class ResetDataProviderCall__Inputs {
  _call: ResetDataProviderCall;

  constructor(call: ResetDataProviderCall) {
    this._call = call;
  }
}

export class ResetDataProviderCall__Outputs {
  _call: ResetDataProviderCall;

  constructor(call: ResetDataProviderCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class UndoActionCall extends ethereum.Call {
  get inputs(): UndoActionCall__Inputs {
    return new UndoActionCall__Inputs(this);
  }

  get outputs(): UndoActionCall__Outputs {
    return new UndoActionCall__Outputs(this);
  }
}

export class UndoActionCall__Inputs {
  _call: UndoActionCall;

  constructor(call: UndoActionCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UndoActionCall__Outputs {
  _call: UndoActionCall;

  constructor(call: UndoActionCall) {
    this._call = call;
  }
}

export class WithdrawCollateralCall extends ethereum.Call {
  get inputs(): WithdrawCollateralCall__Inputs {
    return new WithdrawCollateralCall__Inputs(this);
  }

  get outputs(): WithdrawCollateralCall__Outputs {
    return new WithdrawCollateralCall__Outputs(this);
  }
}

export class WithdrawCollateralCall__Inputs {
  _call: WithdrawCollateralCall;

  constructor(call: WithdrawCollateralCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get destination(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get details(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class WithdrawCollateralCall__Outputs {
  _call: WithdrawCollateralCall;

  constructor(call: WithdrawCollateralCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawMyEarningsCall extends ethereum.Call {
  get inputs(): WithdrawMyEarningsCall__Inputs {
    return new WithdrawMyEarningsCall__Inputs(this);
  }

  get outputs(): WithdrawMyEarningsCall__Outputs {
    return new WithdrawMyEarningsCall__Outputs(this);
  }
}

export class WithdrawMyEarningsCall__Inputs {
  _call: WithdrawMyEarningsCall;

  constructor(call: WithdrawMyEarningsCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get destination(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawMyEarningsCall__Outputs {
  _call: WithdrawMyEarningsCall;

  constructor(call: WithdrawMyEarningsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
